---
import PrivateHeader from '../../../components/manage/PrivateHeader.astro'
import ProtectedAreaManagement from '../../../components/manage/ProtectedAreaManagement.tsx'
import Layout from '../../../layouts/Layout.astro'
import { ManageProtectedAreaRepository } from '../../../lib/private/repositories/ManageProtectedAreaRepository'
import { canAccessRoute, type Role } from '../../../lib/utils/permissions'

const user = Astro.locals.user
if (!user) {
  return Astro.redirect('/sign-in')
}

if (!canAccessRoute(user.role as Role, Astro.url.pathname)) {
  return Astro.redirect('/manage/unauthorized')
}

// Get query parameters
const url = new URL(Astro.request.url)
const page = parseInt(url.searchParams.get('page') || '1')
const search = url.searchParams.get('search') || ''
const type = url.searchParams.get('type') || ''
const status = url.searchParams.get('status') || ''
const region = url.searchParams.get('region') || ''

// Fetch protected areas
let areas: Awaited<ReturnType<typeof ManageProtectedAreaRepository.findAll>>['items'] = []

try {
  const result = await ManageProtectedAreaRepository.findAll({
    page,
    search,
    type,
    status,
    region,
    limit: 10,
  })

  areas = result?.items || []
} catch (error) {
  console.error('Error fetching protected areas:', error)
}

const currentUserRole = user.role as Role

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const typedAreas = areas as any
---

<Layout title="Gestión de Áreas Protegidas">
  <PrivateHeader slot="header" />
  <div class="h-[calc(100vh-112px)] overflow-hidden">
    <ProtectedAreaManagement
      initialAreas={typedAreas}
      currentUserRole={currentUserRole}
      currentUserId={user.id}
      client:load
    />
  </div>
</Layout>
